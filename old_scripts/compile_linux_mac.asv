clear all;
%%%%%%%%%%%%% COMPILER CONFIGURATION %%%%%%%%%%%%%%%%
% set up the compiler you want to use. Possible choices are
%   - 'icc' (intel compiler), usually produces the fastest code,
%   - 'gcc' (gnu compiler), very good choice as well (for Mac, use gcc >= 4.6 for
%          the multi-threaded version). For windows, requires cygwin
%   - 'vs'  (visual studio compiler) for windows computers
%   - 'mex' (default matlab compiler, we assume gcc), sometimes results in poor
%           performance due to linking with old multi-threading libraries
 compiler='mex';

% set up the path to the compiler libraries. 
% example when compiler='gcc' for Linux/Mac:   (path containing libgcc_s.*)
% path_to_compiler_libraries='/usr/lib/x86_64-linux-gnu/gcc/x86_64-linux-gnu/4.5/';
% path_to_compiler='/usr/bin/';

% example when compiler='gcc' for Windows+cygwin:   (the script does not
% work at the moment in this configuration
% path_to_compiler='C:\cygwin\bin\';
% path_to_compiler_libraries='C:\cygwin\lib\gcc\i686-pc-cygwin\4.5.3\';

% example when compiler='icc' for Linux/Mac
% path_to_compiler_libraries='/opt/intel/composerxe/lib/intel64/';
% path_to_compiler'/opt/intel/composerxe/bin/';

% example when compiler='icc' for Windows
% path_to_compiler_libraries='C:\Program Files (x86)\Intel\ComposerXE-2011\lib\';

% example when compiler='vs' for Windows
 path_to_compiler_libraries='C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\bin\amd64\';
 path_to_compiler=path_to_compiler_libraries;
% leave it blank when compiler='mex'
% path_to_compiler_libraries='';
% path_to_compiler='';

% set true if you want to use multi-threaded capabilities of the toolbox. You
% need an appropriate compiler for that (intel compiler, most recent gcc, or visual studio pro)
use_multithread=true;   % (not compatible with compiler=mex)
% if the compilation fails on Mac, try the single-threaded version.             

%%%%%%%%%%%% BLAS/LAPACK CONFIGURATION %%%%%%%%%%%%%%
% set up the blas/lapack library you want to use. Possible choices are
%   - mkl: (intel math kernel library), usually the fastest
%   - gsl: (gnu gsl implementation of blas/lapack), shipped with SPAMS v2.2
%           for Linux/Windows
%   - blas: (netlib implementation of blas/lapack),
%   - builtin: blas/lapack shipped with Matlab, very slow on recent matlab
%           versions, for unknown reasons :-(
% ==> this can be tweaked to include your favorite blas/lapack library
blas='mkl';

% set up the path to the blas/lapack libraries. 
% example when blas='gsl':
    path_to_blas='./libs_ext/';  % (shipped with SPAMS v2.2)
% example when blas='mkl' for Linux
%    path_to_blas='/opt/intel/composerxe/mkl/lib/intel64/';
% example when blas='mkl' for Windows
    path_to_blas='C:\Program Files (x86)\Intel\ComposerXE-2011\mkl\lib\intel64\';
% leave it blank for built-in:
%    path_to_blas=''; 


%%%%%%%%%%%% END OF THE CONFIGURATION %%%%%%%%%%%%%%
% Do not touch what is below this line, unless you know what you are doing
out_dir='./build/';

COMPILE = { % compile linalg toolbox
            '-I./linalg/ -I./decomp/ decomp/mex/mexLasso.cpp',
            '-I./linalg/ -I./decomp/ decomp/mex/mexOMP.cpp',
            '-I./linalg/ linalg/mex/mexCalcAAt.cpp',
            '-I./linalg/ linalg/mex/mexCalcXAt.cpp',  
            '-I./linalg/ linalg/mex/mexCalcXY.cpp',  
            '-I./linalg/ linalg/mex/mexCalcXYt.cpp', 
            '-I./linalg/ linalg/mex/mexCalcXtY.cpp',  
            '-I./linalg/ linalg/mex/mexConjGrad.cpp',  
            '-I./linalg/ linalg/mex/mexInvSym.cpp',  
            '-I./linalg/ linalg/mex/mexNormalize.cpp',  
            '-I./linalg/ linalg/mex/mexSort.cpp', 
            '-I./linalg/ linalg/mex/mexSparseProject.cpp',
            % compile decomp toolbox
            '-I./linalg/ -I./decomp/ decomp/mex/mexCD.cpp'
            '-I./linalg/ -I./decomp/ decomp/mex/mexL1L2BCD.cpp', 
            '-I./linalg/ -I./decomp/ decomp/mex/mexLassoMask.cpp',
            '-I./linalg/ -I./decomp/ decomp/mex/mexLassoWeighted.cpp',
            '-I./linalg/ -I./decomp/ decomp/mex/mexOMPMask.cpp',
            '-I./linalg/ -I./decomp/ decomp/mex/mexSOMP.cpp',
            % compile dictLearn toolbox
            '-I./linalg/ -I./decomp/ -I./dictLearn/ dictLearn/mex/mexTrainDL.cpp', 
            '-I./linalg/ -I./decomp/ -I./dictLearn/ dictLearn/mex/mexTrainDL_Memory.cpp',
            % compile proximal toolbox
            '-I./linalg/ -I./prox/ prox/mex/mexFistaFlat.cpp',
            '-I./linalg/ -I./prox/ prox/mex/mexFistaTree.cpp',  
            '-I./linalg/ -I./prox/ prox/mex/mexFistaGraph.cpp',  
            '-I./linalg/ -I./prox/ prox/mex/mexProximalFlat.cpp', 
            '-I./linalg/ -I./prox/ prox/mex/mexProximalTree.cpp',  
            '-I./linalg/ -I./prox/ prox/mex/mexProximalGraph.cpp' };        

arch=computer;
mac=strcmp(arch,'MACI64') || strcmp(arch,'MACI') || strcmp(arch,'MAC');
windows=strcmp(arch,'PCWIN64') || strcmp(arch,'PCWIN');
linux=strcmp(arch,'GLNXA64') || strcmp(arch,'GLNX86');
sixtyfourbits=strcmp(arch,'MACI64') || strcmp(arch,'GLNXA64') || strcmp(arch,'PCWIN64');

if linux || mac
   fid=fopen('run_matlab.sh','w+');
   fprintf(fid,'#!/bin/sh\n');
end

if sixtyfourbits
   DEFCOMMON='-largeArrayDims -DNDEBUG';
else
   DEFCOMMON='-DNDEBUG';
end
if windows
   DEFCOMMON=[DEFCOMMON ' -DWINDOWS'];
end

DEFBLAS='';
if strcmp(blas,'mkl') 
   if strcmp(arch,'GLNXA64')
      blas_link = sprintf('-Wl,--start-group %slibmkl_intel_lp64.a %slibmkl_sequential.a %slibmkl_core.a -Wl,--end-group',path_to_blas,path_to_blas,path_to_blas);
   elseif strcmp(arch,'GLNX86')
      blas_link = sprintf('-Wl,--start-group %slibmkl_intel.a %slibmkl_sequential.a %slibmkl_core.a -Wl,--end-group',path_to_blas,path_to_blas,path_to_blas);
   elseif strcmp(arch,'MACI64')
      blas_link = sprintf('%slibmkl_intel_lp64.a %slibmkl_sequential.a %slibmkl_core.a',path_to_blas,path_to_blas,path_to_blas);
   elseif strcmp(arch,'MACI') || strcmp(arch,'MAC')
      blas_link = sprintf('%slibmkl_intel.a %slibmkl_sequential.a %slibmkl_core.a',path_to_blas,path_to_blas,path_to_blas);
   elseif strcmp(arch,'PCWIN64')
      blas_link = sprintf(' -L%s '-lmkl_intel_lp64 -lmkl_sequential -lmkl_core';
   elseif strcmp(arch,'PCWIN')
      blas_link = sprintf(' -L%s -lmkl_intel -lmkl_sequential -lmkl_core',path_to_blas);
   else
      'unsupported achitecture'
      return;
   end
elseif strcmp(blas,'blas')
   blas_link='-lblas -llapack';
elseif strcmp(blas,'gsl')
   if sixtyfourbits
      blas_link='-lgslcblas';
   else
      blas_link='-lcblas_32 -llapack_32';
   end
elseif strcmp(blas,'builtin')
   blas_link='-lmwblas -lmwlapack';
   DEFBLAS='-DUSE_MATLAB_LIB';
   if ~verLessThan('matlab','7.9.0')
      DEFBLAS=[DEFBLAS ' -DNEW_MATLAB'];
   end
else
   'please provide a correct blas library';
   return;
end

links_lib=['-L/usr/lib/ -L/usr/lib64 ' blas_link];

if strcmp(compiler,'icc') 
   if windows
       DEFCOMP=sprintf('COMPILER=%s/icpc',path_to_compiler);
       compile_flags='/Qvc9 /fast /QaxSSE2,SSE3,SSE4.1,SSE4.2,AVX /Qansi-alias  /Qopenmp /fp:fast=2 /MD /Oy- /GR /EHs /Zp8';
   else
       DEFCOMP=sprintf('CXX=%s/icpc',path_to_compiler);
       compile_flags='-fPIC -axSSE3,SSE4.1,SSE4.2,AVX -pipe -w -w0 -O2 -fomit-frame-pointer -no-prec-div -fno-alias -fno-fnalias -align -falign-functions -fp-model fast -funroll-loops -cxxlib-gcc';
   end
   links_lib=[links_lib ' -L' path_to_compiler_libraries ' -L' path_to_blas];
   if mac
      fprintf(fid,'export LIB_INTEL=%s\n',path_to_compiler_libraries);
      fprintf(fid,sprintf('export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:%s:%s\n',path_to_compiler_libraries,path_to_blas));
      fprintf(fid,'export DYLD_INSERT_LIBRARIES=$LIB_INTEL/libimf.dylib:$LIB_INTEL/libintlc.dylib:$LIB_INTEL/libiomp5.dylib:$LIB_INTEL/libsvml.dylib\n');
   elseif linux
      fprintf(fid,'export LIB_INTEL=%s\n',path_to_compiler_libraries);
      fprintf(fid,sprintf('export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:%s:%s\n',path_to_compiler_libraries,path_to_blas));
      fprintf(fid,'export LD_PRELOAD=$LIB_INTEL/libimf.so:$LIB_INTEL/libintlc.so.5:$LIB_INTEL/libiomp5.so:$LIB_INTEL/libsvml.so\n');
   end
   if use_multithread
      if windows
         compile_flags=[compile_flags ' /Qopenmp']; 
         links_lib=[links_lib ' /nodefaultlib:vcomp libiomp5md.lib'];
      else
         compile_flags=[compile_flags ' -openmp'];
         links_lib=[links_lib ' -liomp5'];
         fprintf(fid,'export KMP_DUPLICATE_LIB_OK=true\n');
      end
   end
elseif strcmp(compiler,'gcc')
   if windows
      DEFCOMP=['PATH=%PATH\%;' path_to_compiler ' COMPILER=g++-4' ' COMPFLAGS="-c -fexceptions" NAME_OBJECT=-o']; 
   else
      DEFCOMP=sprintf('CXX=%s/g++',path_to_compiler);
   end
   compile_flags='-O2 -mtune=core2 -fomit-frame-pointer -funsafe-loop-optimizations';
   links_lib=[links_lib ' -L' path_to_compiler_libraries ' -L' path_to_blas];
   if mac
      fprintf(fid,'export LIB_GCC=%s\n',path_to_compiler_libraries);
      fprintf(fid,sprintf('export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:%s:%s\n',path_to_compiler_libraries,path_to_blas));
      fprintf(fid,'export DYLD_INSERT_LIBRARIES=$LIB_GCC/libgfortran.so:$LIB_GCC/libgcc_s.so:$LIB_GCC/libstdc++.so:$LIB_GCC/libgomp.so\n');
   elseif linux
      fprintf(fid,'export LIB_GCC=%s\n',path_to_compiler_libraries);
      fprintf(fid,sprintf('export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:%s:%s\n',path_to_compiler_libraries,path_to_blas));
      fprintf(fid,'export LD_PRELOAD=$LIB_GCC/libgfortran.so:$LIB_GCC/libgcc_s.so:$LIB_GCC/libstdc++.so:$LIB_GCC/libgomp.so\n');
   end
   if use_multithread
      compile_flags=[compile_flags ' -fopenmp'];
      links_lib=[links_lib ' -lgomp'];
   end
elseif strcmp(compiler,'vs')
   DEFCOMP=sprintf('COMPILER="%s\icl.exe"',path_to_compiler);
   compile_flags='/c /02';
   if use_multithread
      compile_flags=[compile_flags ' -fopenmp'];
      links_lib=[links_lib ' -lvomp'];
   end
elseif strcmp(compiler,'mex')
   DEFCOMP='';
   compile_flags=' -O';
else
    'unknown compiler'
    return;
end
   
if ~windows
   fprintf(fid,'matlab $* -r \"addpath(''./build/''); addpath(''./test_release'');"\n'); 
   fclose(fid);
   !chmod +x run_matlab.sh
end

DEFS=[DEFBLAS ' ' DEFCOMMON ' ' DEFCOMP];

for k = 1:length(COMPILE),
    str = COMPILE{k};
    fprintf('compilation of: %s\n',str);
    if windows
       str = [str ' -v -outdir ' out_dir, ' ' DEFS ' ' links_lib ' OPTIMFLAGS="' compile_flags '" ']; 
    else
       str = [str ' -v -outdir ' out_dir, ' ' DEFS ' CXXOPTIMFLAGS="' compile_flags '" ' links_lib];
    end
    args = regexp(str, '\s+', 'split');
    args = args(find(~cellfun(@isempty, args)));
    mex(args{:});
end

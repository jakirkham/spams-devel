#!/usr/bin/perl -w
use strict;

require "doclib.ph";

# fabrique dans man les docs spams.<nom>.Rd, a partir des mex*,
# pour les fonctions definies dans un fichier R (r_spams.R par ex)
my $dir = $main::mlab_dir;

@main::keys = ('Name','Description','Usage','Inputs','Param','detail','Output','Author','Note','Examples');

my $rdformat = {
    'Name' => {'tag' => 'title'},
    'Description' => {'tag' => 'description'},
    'Usage' => {'tag' => 'usage'},
    'Inputs' => {'tag' => 'arguments','prog' => \&parse_args},
    'detail' => {'tag' => 'details', 'optional' => 1,'prog' => \&set_verb},
    'Param' => {'tag' => 'Kwargs', 'optional' => 1,'prog' => \&parse_args},
    'Output' => {'tag' => 'value','prog' => \&parse_args},
    'Author' => {'tag' => 'author'},
    'Note' => {'tag' => 'note', 'optional' => 1},
    'Examples' => {'tag' => 'examples', 'optional' => 1},
};

my $indent = "    ";
sub usage {
    print "Usage : $0 [-tex doc-dir] R-filename\n",
    "   Ex: $0 r_spams\n";
    exit 1;
}

(-d $dir) || die "No dir $dir!\n";
system "rm -rf man"; mkdir "man";
(-d "man") || die "No dir man!\n";
##(-d "html") || die "No dir html!\n";


my $file = "";
my $flg_out = 0; # 0 doc std, 1 : latex pour doc_spams
my $doc_dir = ".";

while($#ARGV >= 0) {
    $_ = shift(@ARGV);
    if(/^-tex$/) {
	($#ARGV >= 0) || usage();
	$doc_dir = shift(@ARGV);
	$flg_out = 2;
	next;
    }
    (/^-/) && usage();
    ("$file") && usage();
    $file = $_;
}
("$file") || usage();

my %iprogs = ();
my %progdefs = ();
my @spams = ();

$file =~ s/\.R$//;
if($flg_out) {
    (-d $doc_dir) || die "No dir $doc_dir!\n";
}
read_spams("$file.R",\&find_Rdef,\%progdefs,\%iprogs,\@spams);

##@iprogs = ("SparseProject");
my @idx = ();
while(my ($k,$ix) = each(%progdefs)) {
    push(@idx,$$ix[1]);
}
my @indx = sort {$a <=> $b} @idx;
if($flg_out > 0) {
    make_tex_doc(1,$doc_dir,\@indx,\%iprogs,\@spams,\%progdefs);
    exit 0;
}


foreach my $i (@indx) {
    my $myprog = $iprogs{$i};
    my $mlab_prog = mlab_name($myprog);
    my %doc = ();
    prepare_doc(1,$mlab_prog,$myprog,\%doc,$rdformat,\@spams,\%progdefs);
    print "++ $myprog\n";
    write_man("man/spams.$myprog.Rd","spams.$myprog",\%doc,$rdformat);
    # make html version
##    system "R CMD Rdconv -t html man/spams.$prog.Rd -o html/spams.$prog.html";
#    print_man("man/spams.$prog.Rd",$prog,\%doc);
}
# copy some specific mans
system "cp ./refman/*.Rd man";

exit 0;

# $flag : 0 if search for begining of def
# out : ($prog,$found) 
#     $prog : progname if 1st line of def, "" else
# $found : 0 : not a function def, -1 : unfinished def, 1 = end of def
sub find_Rdef {
    my ($s,$flag) = @_;
    my $prog = "";
    my $found = 0;
    if(! $flag) {
	if($s =~ /^spams\.([^\s<]+)\s*<-/) {
	    $prog = $1;
	    $found = -1;
	    if(/\{\s*$/) {$found = 1;}
	}
    } else {
	$found = -1;
	if(/\{\s*$/) {$found = 1;}
    }
    return($prog,$found);
}


# format value
sub parse_value {
    my($lines) = @_;
    my @res = ();
    ($#$lines >= 0) || return @res;
    my $s = $$lines[0];
    if($s =~ s/^\s*([^\s:])\s*:\s*//) {
	$s = "\\strong{$1} : $s";
    }
    push(@res,$s);
    for(my $i = 1;$i <= $#$lines;$i++) {
	push(@res,$$lines[$i]);
    }
    return @res;
}
sub set_verb {
    my($lines) = @_;
    my @res = ();
    ($#$lines >= 0) || return @res;
    my $s = $$lines[0];
    push(@res,"\\preformatted{$s");
    for(my $i = 1;$i <= $#$lines;$i++) {
	push(@res,$$lines[$i]);
    }
    push(@res,"}");
    return @res;
}


# format input args
sub parse_args {
    my ($lines) = @_;
    my $in_var = 0;
    my @res = ();
    for(my $i = 0;$i <= $#$lines;$i++) {
	my $s = $$lines[$i];
	if($s =~ s/^\s*([^\s:]+)\s*:\s*//) {
	    my $v = $1;
	    if($v eq "param" && $s eq "struct") {$s = "";}
	    if($in_var) {
		push(@res,"}}");
	    }
	    $in_var = 1;
	    push(@res,"\\item{$v}{%",$s,"\\preformatted{%");
	    next;
	}
	push(@res,$s);
    }
    if($in_var) {push(@res,"}}");}
    return @res;
}

sub write_man {
    my($f,$prog,$doc,$rdformat) = @_;
    my($rdf,$i,$key,$tmp);
    open(OUT,">$f") || die "$f create err $!\n";
    print OUT "\\name{$prog}\n\\alias{$prog}\n";
    my $doci = $$doc{'Inputs'};
    if(defined($$doc{'Param'})) {
	my $docp = $$doc{'Param'};
	push(@$doci,@$docp);
	undef($$doc{'Param'});
    }
    foreach $key (@main::keys) {
	(defined($$rdformat{$key})) || next;
	$rdf = $$rdformat{$key};
	if(! defined($$doc{$key})) {
	    if(! defined($$rdf{'optional'})) {
		print STDERR "!! $prog : $key MISSING.\n";
	    }
	    next;
	}
	$tmp = $$doc{$key};
	if($#$tmp < 0) {
	    if(! defined($$rdf{'optional'})) {
		print STDERR "!! $prog : $key EMPTY.\n";
	    }
	    next;
	}
	print OUT "\\$$rdf{'tag'}\{\n";
	if(defined($$rdf{'prog'})) {
	    my $func = $$rdf{'prog'};
	    my @res = &$func($tmp);
	    print OUT join("\n",@res), "\n}\n";
	} else {
	    print OUT join("\n",@$tmp), "\n}\n";
	}
    }
	
    close(OUT);
#    exit;
}

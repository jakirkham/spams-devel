#!/usr/bin/perl -w
use strict;

require "doclib.ph";

my $dir = $main::mlab_dir;
sub usage {
    print "Usage : $0 file.py\n";
    exit 1;
}
#@main::keys = ('Usage','Name','Description','detail','Inputs','Output','Author','Note','Examples');
@main::keys = ('Description','detail','Inputs','Param','Output','Author','Note','Examples');

my $docformat = {
    'Name' => {'tag' => 'Name'},
    'Description' => {},
    'Usage' => {'tag' => 'Usage'},
    'Inputs' => {'tag' => 'Args','indent' => 1,'prog' => \&parse_args},
    'Param' => {'tag' => 'Kwargs', 'optional' => 1,'indent' => 1,'prog' => \&parse_args},
    'detail' => { 'optional' => 1},
    'Output' => {'tag' => 'Returns', 'indent' => 1,'prog' => \&parse_args},
    'Author' => {'tag' => 'Authors'},
    'Note' => {'tag' => 'Note', 'optional' => 1},
    'Examples' => {'tag' => 'Examples', 'optional' => 1},
};

my @lst= ();
my %docs = ();
my %progs = ();
my @spams = ();
my $i = -1;
my ($x,$prog);
my @indx = ();

my $file = "";

while($#ARGV >= 0) {
    $_ = shift(@ARGV);
    (/^-/) && usage();
    ("$file") && usage();
    $file = $_;
}
("$file") || usage();
$file =~ s/\.py$//;
read_spams("$file.py",\&find_pydef,\@indx,\%progs,\@spams);

#exit 0;
# $flag : 0 if search for begining of def
# out : ($prog,$found) 
#     $prog : progname if 1st line of def, "" else
# $found : 0 : not a function def, -1 : unfinished def, 1 = end of def
sub find_pydef {
    my ($s,$flag) = @_;
    my $prog = "";
    my $found = 0;
    if(! $flag) {
	if($s =~ /^def\s+([^\(]+)\s*\(/) {
	    $prog = $1;
	    $found = -1;
	    if(/\)\s*:\s*$/) {$found = 1;}
	}
    } else {
	$found = -1;
	if(/\)\s*:\s*$/) {$found = 1;}
    }
    return($prog,$found);
}

open(OUT,">$file.new.py") || die "spams.py.new create err $!\n";
my $j = 0;
foreach $i (@indx) {
    my $mlab_prog = $progs{$i};
    my $myprog = $mlab_prog;
    my %doc = ();
    prepare_doc($mlab_prog,$myprog,\%doc,$docformat);
    print "$i : $myprog\n";
    while($j <= $i) {
	$_ = $spams[$j++];
	print OUT "$_\n";
    }
    # enlever ancienne doc si necessaire
    if($spams[$j] =~ /^\s+"""/) {
	$j++;
	while(! ($spams[$j++] =~ /^\s+"""/)) {}
    }
    write_doc(*OUT,$myprog,\%doc,$docformat);
}
while($j <= $#spams) {
    $_ = $spams[$j++];
    print OUT "$_\n";
}
close(OUT);
exit(0);

sub write_doc {
    my($fh,$prog,$doc,$format) = @_;
    my $indent00 = "    ";
    my $indent0 = "$indent00  ";
    my $indent;
    print $fh "$indent00\"\"\"\n";
    foreach my $key (@main::keys) {
	(defined($$format{$key})) || next;
	my $fmt = $$format{$key};
	if(! defined($$doc{$key})) {
	    if(! defined($$fmt{'optional'})) {
		print STDERR "!! $prog : $key MISSING.\n";
	    }
	    next;
	}
	
	my $tmp = $$doc{$key};
	if(defined($$fmt{'tag'})) {
	    print $fh "$indent00$$fmt{'tag'}:\n";
	}
	if (defined($$fmt{'indent'}))  {
##	    print $fh "\n";
	    $indent = "$indent0$indent0";
	} else {
	    $indent = $indent0;
	}
	if(defined($$fmt{'prog'})) {
	    my $func = $$fmt{'prog'};
	    my @res = &$func($tmp);
	    print $fh $indent, join("\n$indent",@res), "\n";
	} else {
	    print $fh $indent, join("\n$indent",@$tmp), "\n";
	}
    }
    print $fh "$indent00\"\"\"\n\n";
     
}

# format  args
sub parse_args {
    my ($lines) = @_;
    my $in_var = 0;
    my @res = ();
    my $rmblk = "";
    for(my $i = 0;$i <= $#$lines;$i++) {
	my $s = $$lines[$i];
	if($s =~ s/^\s*([^\s:]+)\s*:\s*//) {
	    my $v = $1;
	    if($in_var) {
#		push(@res,"}}");
	    }
	    $in_var = 1;
	    push(@res,"$v: $s");
	    next;
	}
	if(! ($s =~ s/^\s*param\[/param[/)) {
	    $s =~ s/^\s+/  /;
	}
	push(@res,$s);
    }
#    if($in_var) {push(@res,"}}");}
    return @res;
}

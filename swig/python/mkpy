#!/bin/bash
case $1 in -x) set -x;shift;;esac

debug=0

macos=0

INC="-I. -Ispams/linalg -Ispams/prox -Ispams/decomp -Ispams/dictLearn"
XCCFLAGS=""
XLINKFLAGS=""
# on MacOS, use following definition instead.

if [ -d /System/Library/Frameworks ]; then  
 # MacOs
    macos=1
    INC="$INC -I/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/numpy/core/include"
    XCCFLAGS="-m32"
    XLINKFLAGS="-m32 -framework Python"
fi

die () {
    echo "$1"
    exit 1
}
usage () {
    echo "Usage $0 [-cl][-ns][-g][-D] nom+"
    echo "  -cl : clear"
    die "   -ns : don't redo swig"
}

flg_clear=0
flg_swig=1
lst=""
optc="-O -DNDEBUG"
#CXX=g++-4.2
CXX=g++
while [ $# -gt 0 ]; do
    case $1 in
	-cl) flg_clear=1;;
	-ns) flg_swig=0;;
	-g) optc="-g";;
	-D) debug=1;;
	-*) usage;;
	*) lst="$lst $1";;
    esac
    shift
done

if [ $flg_clear -gt 0 ]; then
    for nom in $lst; do
	/bin/rm -f $nom.o ${nom}_wrap.o ${nom}_wrap.py ${nom}_wrap.pyc $nom.pyc ${nom}_wrap.cpp _${nom}_wrap.so
    done
    exit 0
fi
if [ $debug -eq 0 ]; then
    OPT_DBG=""
else
    OPT_DBG=-DDEBUG
fi    

err=0
for nom in $lst; do
    [ $flg_swig -ne 0 ] && {
	swig -c++ -python $OPT_DBG -o ${nom}_wrap.cpp $nom.i
	[ $? -ne 0 ] && exit
    }
    if [ -e $nom.cpp ]; then
	src="$nom.cpp ${nom}_wrap.cpp"
	obj="$nom.o ${nom}_wrap.o"
    else
	src=${nom}_wrap.cpp
	obj=${nom}_wrap.o
    fi
    $CXX -c -fPIC $optc -DUSE_BLAS_LIB -fopenmp $OPT_DBG -I/usr/include/python2.6 $INC $src $XCCFLAGS
    err=$?;[ $err -eq 0 ] || break
    $CXX -fopenmp -shared $obj -o _${nom}_wrap.so -lstdc++ -lblas -llapack $XLINKFLAGS
    err=$?;[ $err -eq 0 ] || break
 #   /bin/rm -f $nom.o ${nom}_wrap.o
done
[ $err -ne 0 ] && die "ERROR"
    
exit 0
